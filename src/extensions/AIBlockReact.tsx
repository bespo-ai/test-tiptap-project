import { Node, mergeAttributes } from '@tiptap/core'
import { ReactNodeViewRenderer, NodeViewWrapper, NodeViewContent } from '@tiptap/react'
import { useState } from 'react'
import { BlockWithMenu } from './BlockWithMenu'
import './AIBlockReact.css'

const AIBlockComponent = (props: any) => {
  const [prompt, setPrompt] = useState('')
  const [isRunning, setIsRunning] = useState(false)
  const [hasRun, setHasRun] = useState(false)
  
  // Get or create a unique ID for this AI block
  const aiBlockId = props.node.attrs.id || `ai-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  
  // Update the node's ID if it doesn't have one
  if (!props.node.attrs.id) {
    const pos = props.getPos()
    props.editor.chain().updateAttributes('aiBlockReact', { id: aiBlockId }).run()
  }

  const handleRun = () => {
    if (!prompt.trim()) return
    
    setIsRunning(true)

    // Simulate AI processing
    setTimeout(() => {
      // Generate random blocks
      const numBlocks = Math.floor(Math.random() * 3) + 2 // 2-4 blocks
      const blocks = []

      for (let i = 0; i < numBlocks; i++) {
        const isCodeBlock = Math.random() > 0.5

        if (isCodeBlock) {
          const codeSnippets = [
            'function hello() {\n  console.log("Hello World!");\n}',
            'const data = [1, 2, 3, 4, 5];\nconst sum = data.reduce((a, b) => a + b, 0);',
            'class Example {\n  constructor() {\n    this.value = 42;\n  }\n}',
            'async function fetchData() {\n  const response = await fetch("/api/data");\n  return response.json();\n}',
          ]
          blocks.push({
            type: 'codeBlockCustom',
            attrs: { 
              language: 'javascript',
              aiGenerated: aiBlockId,
            },
            content: [{ type: 'text', text: codeSnippets[Math.floor(Math.random() * codeSnippets.length)] }],
          })
        } else {
          const textSnippets = [
            'This is an example text block generated by the AI. It contains some sample content.',
            'Here\'s another text block with different content. The AI can generate various types of responses.',
            'This block demonstrates how the AI output can include multiple paragraphs of text.',
            'The AI system has generated this content based on your prompt. You can edit it as needed.',
          ]
          blocks.push({
            type: 'textBlock',
            attrs: {
              aiGenerated: aiBlockId,
            },
            content: [
              {
                type: 'paragraph',
                content: [{ type: 'text', text: textSnippets[Math.floor(Math.random() * textSnippets.length)] }],
              },
            ],
          })
        }
      }

      // Insert the blocks AFTER this AI block
      const insertPos = props.getPos() + props.node.nodeSize
      props.editor.chain().focus().insertContentAt(insertPos, blocks).run()

      setIsRunning(false)
    }, 1500)
  }

  return (
    <NodeViewWrapper className="ai-block-outer-wrapper">
      <BlockWithMenu editor={props.editor} getPos={props.getPos} node={props.node}>
        <div className={`ai-block-simple ${isRunning ? 'running' : ''}`}>
          <div className="ai-block-title-bar">
            <span className="ai-block-icon">✨</span>
            <span className="ai-block-title">AI Block</span>
            {isRunning && <span className="ai-block-loading">⚡ Generating...</span>}
          </div>
          <textarea
            className="ai-block-prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Enter your prompt here... (e.g., 'Create a function to sort an array')"
            rows={3}
          />
          <button
            className="ai-block-run"
            onClick={handleRun}
            disabled={isRunning || !prompt.trim()}
          >
            {isRunning ? '⚡ Generating...' : '▶ Run'}
          </button>
        </div>
      </BlockWithMenu>
    </NodeViewWrapper>
  )
}

export const AIBlockReact = Node.create({
  name: 'aiBlockReact',

  group: 'block',

  content: '',

  draggable: true,

  atom: true,

  addAttributes() {
    return {
      id: {
        default: null,
        parseHTML: element => element.getAttribute('data-id'),
        renderHTML: attributes => {
          if (!attributes.id) {
            return {}
          }
          return {
            'data-id': attributes.id,
          }
        },
      },
    }
  },

  parseHTML() {
    return [
      {
        tag: 'div[data-type="ai-block-react"]',
      },
    ]
  },

  renderHTML({ HTMLAttributes }) {
    return [
      'div',
      mergeAttributes(HTMLAttributes, {
        'data-type': 'ai-block-react',
      }),
      0,
    ]
  },

  addNodeView() {
    return ReactNodeViewRenderer(AIBlockComponent)
  },

  addCommands() {
    return {
      setAIBlockReact: () => ({ commands }) => {
        return commands.insertContent({
          type: this.name,
        })
      },
    }
  },
})

