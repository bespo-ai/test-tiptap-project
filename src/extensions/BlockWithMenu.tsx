import { useState, useRef } from 'react'
import { Editor } from '@tiptap/react'
import BlockInsertMenu from '../components/BlockInsertMenu'
import './BlockWithMenu.css'

interface BlockWithMenuProps {
  children: React.ReactNode
  editor: Editor
  getPos: () => number
  node: any
}

export const BlockWithMenu = ({ children, editor, getPos, node }: BlockWithMenuProps) => {
  const [showMenu, setShowMenu] = useState(false)
  const buttonRef = useRef<HTMLButtonElement>(null)

  const handlePlusClick = () => {
    setShowMenu(!showMenu)
  }

  const handleDelete = () => {
    const pos = getPos()
    const nodeSize = node.nodeSize
    
    // If this is an AI block, find and delete all its generated blocks
    if (node.type.name === 'aiBlockReact' && node.attrs.id) {
      const aiBlockId = node.attrs.id
      const nodesToDelete: { from: number; to: number }[] = []
      
      // First, add this AI block to the list
      nodesToDelete.push({ from: pos, to: pos + nodeSize })
      
      // Find all blocks generated by this AI block
      editor.state.doc.descendants((node, pos) => {
        if (
          (node.type.name === 'textBlock' || node.type.name === 'codeBlockCustom') &&
          node.attrs.aiGenerated === aiBlockId
        ) {
          nodesToDelete.push({ from: pos, to: pos + node.nodeSize })
        }
      })
      
      // Sort by position in reverse order (delete from end to start to maintain positions)
      nodesToDelete.sort((a, b) => b.from - a.from)
      
      // Delete all nodes
      let transaction = editor.state.tr
      nodesToDelete.forEach(({ from, to }) => {
        transaction = transaction.delete(from, to)
      })
      
      editor.view.dispatch(transaction)
    } else {
      // Regular delete for non-AI blocks
      editor
        .chain()
        .focus()
        .deleteRange({ from: pos, to: pos + nodeSize })
        .run()
    }
  }

  // Calculate position after this block
  const insertPosition = getPos() + node.nodeSize

  return (
    <div className="block-with-menu-wrapper">
      <button
        className="block-delete-button"
        onClick={handleDelete}
        title="Delete this block"
      >
        <span className="delete-icon">Ã—</span>
      </button>
      <div className="block-content">
        {children}
      </div>
      <div className="block-menu-trigger-wrapper">
        <button
          ref={buttonRef}
          className="block-menu-trigger"
          onClick={handlePlusClick}
          title="Insert block below"
        >
          <span className="plus-icon">+</span>
        </button>
      </div>
      {showMenu && (
        <BlockInsertMenu
          editor={editor}
          position={insertPosition}
          onClose={() => setShowMenu(false)}
          buttonRef={buttonRef.current}
        />
      )}
    </div>
  )
}

